{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","board","row","a","push","renderSquare","key","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","location","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f643e472.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n  render() {\n    let board = [];\n    for (let i = 0; i < 3; i++) {\n      let row = [];\n      for (let a = 0; a < 3; a++) {\n        row.push(this.renderSquare(i * 3 + a));\n      }\n      board.push(\n        <div key={i} className=\"board-now\">\n          {row}\n        </div>\n      );\n    }\n    return <div>{board}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    //created an array of combos that corresponds with the squares locations and place it in \"game\" component handleClick function\n    const locations = [\n      //[columns, rows]\n      [1, 1],\n      [2, 1],\n      [3, 1],\n      [1, 2],\n      [2, 2],\n      [3, 2],\n      [1, 3],\n      [2, 3],\n      [3, 3],\n    ];\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          location: locations[i],\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move\n        ? \"Go to move #\" + move + \" at \" + history[move].location\n        : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button className=\"btn\" onClick={() => this.jumpTo(move)}>\n            {move === this.state.stepNumber ? <b>{desc}</b> : desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}